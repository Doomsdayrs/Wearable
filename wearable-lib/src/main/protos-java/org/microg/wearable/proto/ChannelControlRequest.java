// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: protos-repo/wearable.proto
package org.microg.wearable.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class ChannelControlRequest extends Message {

  public static final Integer DEFAULT_TYPE = 0;
  public static final Long DEFAULT_CHANNELID = 0L;
  public static final Boolean DEFAULT_FROMCHANNELOPERATOR = false;
  public static final String DEFAULT_PACKAGENAME = "";
  public static final String DEFAULT_SIGNATUREDIGEST = "";
  public static final String DEFAULT_PATH = "";
  public static final Integer DEFAULT_CLOSEERRORCODE = 0;

  @ProtoField(tag = 1, type = INT32)
  public final Integer type;

  @ProtoField(tag = 2, type = INT64)
  public final Long channelId;

  @ProtoField(tag = 3, type = BOOL)
  public final Boolean fromChannelOperator;

  @ProtoField(tag = 4, type = STRING)
  public final String packageName;

  @ProtoField(tag = 5, type = STRING)
  public final String signatureDigest;

  @ProtoField(tag = 6, type = STRING)
  public final String path;

  @ProtoField(tag = 7, type = INT32)
  public final Integer closeErrorCode;

  public ChannelControlRequest(Integer type, Long channelId, Boolean fromChannelOperator, String packageName, String signatureDigest, String path, Integer closeErrorCode) {
    this.type = type;
    this.channelId = channelId;
    this.fromChannelOperator = fromChannelOperator;
    this.packageName = packageName;
    this.signatureDigest = signatureDigest;
    this.path = path;
    this.closeErrorCode = closeErrorCode;
  }

  private ChannelControlRequest(Builder builder) {
    this(builder.type, builder.channelId, builder.fromChannelOperator, builder.packageName, builder.signatureDigest, builder.path, builder.closeErrorCode);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChannelControlRequest)) return false;
    ChannelControlRequest o = (ChannelControlRequest) other;
    return equals(type, o.type)
        && equals(channelId, o.channelId)
        && equals(fromChannelOperator, o.fromChannelOperator)
        && equals(packageName, o.packageName)
        && equals(signatureDigest, o.signatureDigest)
        && equals(path, o.path)
        && equals(closeErrorCode, o.closeErrorCode);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = type != null ? type.hashCode() : 0;
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (fromChannelOperator != null ? fromChannelOperator.hashCode() : 0);
      result = result * 37 + (packageName != null ? packageName.hashCode() : 0);
      result = result * 37 + (signatureDigest != null ? signatureDigest.hashCode() : 0);
      result = result * 37 + (path != null ? path.hashCode() : 0);
      result = result * 37 + (closeErrorCode != null ? closeErrorCode.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ChannelControlRequest> {

    public Integer type;
    public Long channelId;
    public Boolean fromChannelOperator;
    public String packageName;
    public String signatureDigest;
    public String path;
    public Integer closeErrorCode;

    public Builder() {
    }

    public Builder(ChannelControlRequest message) {
      super(message);
      if (message == null) return;
      this.type = message.type;
      this.channelId = message.channelId;
      this.fromChannelOperator = message.fromChannelOperator;
      this.packageName = message.packageName;
      this.signatureDigest = message.signatureDigest;
      this.path = message.path;
      this.closeErrorCode = message.closeErrorCode;
    }

    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    public Builder channelId(Long channelId) {
      this.channelId = channelId;
      return this;
    }

    public Builder fromChannelOperator(Boolean fromChannelOperator) {
      this.fromChannelOperator = fromChannelOperator;
      return this;
    }

    public Builder packageName(String packageName) {
      this.packageName = packageName;
      return this;
    }

    public Builder signatureDigest(String signatureDigest) {
      this.signatureDigest = signatureDigest;
      return this;
    }

    public Builder path(String path) {
      this.path = path;
      return this;
    }

    public Builder closeErrorCode(Integer closeErrorCode) {
      this.closeErrorCode = closeErrorCode;
      return this;
    }

    @Override
    public ChannelControlRequest build() {
      return new ChannelControlRequest(this);
    }
  }
}
