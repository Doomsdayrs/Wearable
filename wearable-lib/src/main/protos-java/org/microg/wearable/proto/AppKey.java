// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: protos-repo/wearable.proto
package org.microg.wearable.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;

public final class AppKey extends Message {

  public static final String DEFAULT_PACKAGENAME = "";
  public static final String DEFAULT_SIGNATUREDIGEST = "";

  @ProtoField(tag = 1, type = STRING)
  public final String packageName;

  @ProtoField(tag = 2, type = STRING)
  public final String signatureDigest;

  public AppKey(String packageName, String signatureDigest) {
    this.packageName = packageName;
    this.signatureDigest = signatureDigest;
  }

  private AppKey(Builder builder) {
    this(builder.packageName, builder.signatureDigest);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AppKey)) return false;
    AppKey o = (AppKey) other;
    return equals(packageName, o.packageName)
        && equals(signatureDigest, o.signatureDigest);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = packageName != null ? packageName.hashCode() : 0;
      result = result * 37 + (signatureDigest != null ? signatureDigest.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<AppKey> {

    public String packageName;
    public String signatureDigest;

    public Builder() {
    }

    public Builder(AppKey message) {
      super(message);
      if (message == null) return;
      this.packageName = message.packageName;
      this.signatureDigest = message.signatureDigest;
    }

    public Builder packageName(String packageName) {
      this.packageName = packageName;
      return this;
    }

    public Builder signatureDigest(String signatureDigest) {
      this.signatureDigest = signatureDigest;
      return this;
    }

    @Override
    public AppKey build() {
      return new AppKey(this);
    }
  }
}
