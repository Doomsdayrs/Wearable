/*
 * SPDX-FileCopyrightText: 2015, microG Project Team
 * SPDX-License-Identifier: Apache-2.0
 */

option java_package = "org.microg.wearable.proto";
option java_outer_classname = "WearableProto";

message AckAsset {
    optional string digest = 1;
}

message AppKey {
    optional string packageName = 1;
    optional string signatureDigest = 2;
}

message AppKeys {
    repeated AppKey appKeys = 1;
}

message Asset {
    // TODO
    optional string digest = 4;
}

message AssetEntry {
    optional string key = 1;
    optional Asset value = 2;
    optional int32 unknown3 = 3;
}

message ChannelControlRequest {
    optional int32 type = 1;
    optional int64 channelId = 2;
    optional bool fromChannelOperator = 3;
    optional string packageName = 4;
    optional string signatureDigest = 5;
    optional string path = 6;
    optional int32 closeErrorCode = 7;
}

message ChannelDataAckRequest {
    optional ChannelDataHeader header = 1;
    optional bool finalMessage = 2;
}

message ChannelDataHeader {
    optional int64 channelId = 1;
    optional bool fromChannelOperator = 2;
    optional int64 requestId = 3;
}

message ChannelDataRequest {
    optional ChannelDataHeader header = 1;
    optional bytes payload = 2;
    optional bool finalMessage = 3;
}

message ChannelRequest {
    optional ChannelControlRequest channelControlRequest = 2;
    optional ChannelDataRequest channelDataRequest = 3;
    optional ChannelDataAckRequest channelDataAckRequest = 4;
    optional int32 version = 6;
    optional int32 origin = 7;
}

message Connect {
    optional string id = 1;
    optional string name = 2;
    optional int64 peerAndroidId = 3;
    optional int32 unknown4 = 4;
    optional int32 peerVersion = 5;
    optional int32 peerMinimumVersion = 6;
    optional string networkId = 7;
}

message FetchAsset {
    optional string packageName = 1;
    optional string assetName = 2;
    optional bool permission = 3;
    optional string signatureDigest = 4;
}

message FilePiece {
    optional string fileName = 1;
    optional bool finalPiece = 2;
    optional bytes piece = 3;
    optional string digest = 4;
}

message Heartbeat {

}

message MessagePiece {
    optional bytes data = 1;
    optional string digest = 2;
    optional int32 thisPiece = 3;
    optional int32 totalPieces = 4;
    optional int32 queueId = 5;
}

message Request {
    optional int32 requestId = 1;
    optional string packageName = 2;
    optional string signatureDigest = 3;
    optional string targetNodeId = 4;
    optional int32 unknown5 = 5;
    optional string path = 6;
    optional bytes rawData = 7;
    optional string sourceNodeId = 8;
    optional ChannelRequest request = 9;
    optional int32 generation = 10;
}

message RootMessage {
    optional SetAsset setAsset = 4;
    optional AckAsset ackAsset = 5;
    optional FetchAsset fetchAsset = 6;
    optional Connect connect = 7;
    optional SyncStart syncStart = 8;
    optional SetDataItem setDataItem = 9;
    optional Request rpcRequest = 10;
    optional Heartbeat heartbeat = 11;
    optional FilePiece filePiece = 12;
    optional bool hasAsset = 13;
    optional Request channelRequest = 16;
}

message SetAsset {
    optional string digest = 1;
    optional bytes data = 2;
    optional AppKeys appkeys = 3;
}

message SetDataItem {
    optional string packageName = 1;
    optional string uri = 2;
    repeated string unknown3 = 3;
    optional bytes data = 4;
    optional int64 seqId = 5;
    optional bool deleted = 6;
    optional string source = 7;
    repeated AssetEntry assets = 8;
    optional string signatureDigest = 9;
    optional int64 lastModified = 10;
}

message SyncStart {
    optional int64 receivedSeqId = 1;
    repeated SyncTableEntry syncTable = 2;
    optional int32 version = 3;
}

message SyncTableEntry {
    optional string key = 1;
    optional int64 value = 2;
}
