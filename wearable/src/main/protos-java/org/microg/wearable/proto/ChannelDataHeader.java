// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: protos-repo/wearable.proto
package org.microg.wearable.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT64;

public final class ChannelDataHeader extends Message {

  public static final Long DEFAULT_CHANNELID = 0L;
  public static final Boolean DEFAULT_FROMCHANNELOPERATOR = false;
  public static final Long DEFAULT_REQUESTID = 0L;

  @ProtoField(tag = 1, type = INT64)
  public final Long channelId;

  @ProtoField(tag = 2, type = BOOL)
  public final Boolean fromChannelOperator;

  @ProtoField(tag = 3, type = INT64)
  public final Long requestId;

  public ChannelDataHeader(Long channelId, Boolean fromChannelOperator, Long requestId) {
    this.channelId = channelId;
    this.fromChannelOperator = fromChannelOperator;
    this.requestId = requestId;
  }

  private ChannelDataHeader(Builder builder) {
    this(builder.channelId, builder.fromChannelOperator, builder.requestId);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChannelDataHeader)) return false;
    ChannelDataHeader o = (ChannelDataHeader) other;
    return equals(channelId, o.channelId)
        && equals(fromChannelOperator, o.fromChannelOperator)
        && equals(requestId, o.requestId);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = channelId != null ? channelId.hashCode() : 0;
      result = result * 37 + (fromChannelOperator != null ? fromChannelOperator.hashCode() : 0);
      result = result * 37 + (requestId != null ? requestId.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ChannelDataHeader> {

    public Long channelId;
    public Boolean fromChannelOperator;
    public Long requestId;

    public Builder() {
    }

    public Builder(ChannelDataHeader message) {
      super(message);
      if (message == null) return;
      this.channelId = message.channelId;
      this.fromChannelOperator = message.fromChannelOperator;
      this.requestId = message.requestId;
    }

    public Builder channelId(Long channelId) {
      this.channelId = channelId;
      return this;
    }

    public Builder fromChannelOperator(Boolean fromChannelOperator) {
      this.fromChannelOperator = fromChannelOperator;
      return this;
    }

    public Builder requestId(Long requestId) {
      this.requestId = requestId;
      return this;
    }

    @Override
    public ChannelDataHeader build() {
      return new ChannelDataHeader(this);
    }
  }
}
