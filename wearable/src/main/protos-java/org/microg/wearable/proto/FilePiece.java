// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: protos-repo/wearable.proto
package org.microg.wearable.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.STRING;

public final class FilePiece extends Message {

  public static final String DEFAULT_FILENAME = "";
  public static final Boolean DEFAULT_FINALPIECE = false;
  public static final ByteString DEFAULT_PIECE = ByteString.EMPTY;
  public static final String DEFAULT_DIGEST = "";

  @ProtoField(tag = 1, type = STRING)
  public final String fileName;

  @ProtoField(tag = 2, type = BOOL)
  public final Boolean finalPiece;

  @ProtoField(tag = 3, type = BYTES)
  public final ByteString piece;

  @ProtoField(tag = 4, type = STRING)
  public final String digest;

  public FilePiece(String fileName, Boolean finalPiece, ByteString piece, String digest) {
    this.fileName = fileName;
    this.finalPiece = finalPiece;
    this.piece = piece;
    this.digest = digest;
  }

  private FilePiece(Builder builder) {
    this(builder.fileName, builder.finalPiece, builder.piece, builder.digest);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FilePiece)) return false;
    FilePiece o = (FilePiece) other;
    return equals(fileName, o.fileName)
        && equals(finalPiece, o.finalPiece)
        && equals(piece, o.piece)
        && equals(digest, o.digest);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = fileName != null ? fileName.hashCode() : 0;
      result = result * 37 + (finalPiece != null ? finalPiece.hashCode() : 0);
      result = result * 37 + (piece != null ? piece.hashCode() : 0);
      result = result * 37 + (digest != null ? digest.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<FilePiece> {

    public String fileName;
    public Boolean finalPiece;
    public ByteString piece;
    public String digest;

    public Builder() {
    }

    public Builder(FilePiece message) {
      super(message);
      if (message == null) return;
      this.fileName = message.fileName;
      this.finalPiece = message.finalPiece;
      this.piece = message.piece;
      this.digest = message.digest;
    }

    public Builder fileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    public Builder finalPiece(Boolean finalPiece) {
      this.finalPiece = finalPiece;
      return this;
    }

    public Builder piece(ByteString piece) {
      this.piece = piece;
      return this;
    }

    public Builder digest(String digest) {
      this.digest = digest;
      return this;
    }

    @Override
    public FilePiece build() {
      return new FilePiece(this);
    }
  }
}
